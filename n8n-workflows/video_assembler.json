{
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"scenes\": [\n    {\n      \"image_path\": \"/data/files/scene_1.png\",\n      \"audio_path\": \"/data/files/scene_1.mp3\",\n      \"duration\": 5\n    }\n  ],\n  \"output_path\": \"/data/files/final_video.mp4\"\n}"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "8c446ac8-be0b-4075-a4eb-602b048da0e6",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "// The input data will come directly from the Trigger node\nconst inputData = $json;\nconst scenes = inputData.scenes;\nconst outputPath = inputData.output_path;\n\n// Start building the FFmpeg command with the -y flag to overwrite\nlet command = 'ffmpeg -y';\n\n// Add all image and audio files as inputs\nscenes.forEach((scene, index) => {\n  command += ` -i ${scene.image_path}`;\n  command += ` -i ${scene.audio_path}`;\n});\n\n// Start the complex filter graph for animation and concatenation\ncommand += ' -filter_complex \"';\n\n// Process each scene to create an animated video clip and an audio stream\nscenes.forEach((scene, index) => {\n  const videoInputIndex = index * 2;\n  const audioInputIndex = index * 2 + 1;\n  const duration = scene.duration;\n  const frameRate = 25;\n  const totalFrames = duration * frameRate;\n\n  // Ken Burns animation effect (zoom/pan) for the video stream\n  command += `[${videoInputIndex}:v]format=yuv420p,scale=1080*1.5:-1,zoompan=z='min(zoom+0.001,1.5)':d=${totalFrames}:x='iw/2-(iw/zoom/2)':y='ih/2-(ih/zoom/2)':s=1080x1920,setsar=1[v${index}]; `;\n\n  // Prepare the audio stream\n  command += `[${audioInputIndex}:a]aformat=sample_fmts=s16:sample_rates=44100[a${index}]; `;\n});\n\n// Concatenate (chain) all the processed video and audio clips\nscenes.forEach((scene, index) => {\n  command += `[v${index}][a${index}]`;\n});\ncommand += `concat=n=${scenes.length}:v=1:a=1[vout][aout]\"`;\n\n// Map the final combined streams to the output\ncommand += ' -map \"[vout]\" -map \"[aout]\"';\n\n// Set codecs and finalize the output file\ncommand += ` -c:v libx264 -c:a aac -movflags +faststart ${outputPath}`;\n\n// Return the final command string in a JSON object\nreturn { ffmpeg_command: command };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        0
      ],
      "id": "87ecbbfe-f21c-407b-8a55-5ffe8221b3ea",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "command": "={{ $json.ffmpeg_command }}\n\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        416,
        0
      ],
      "id": "7731b148-8cf1-4ad5-922e-8aad809f76ef",
      "name": "Execute Command"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "a06370c1558bdfcb1f62c6257da0d3623c935a386284d4ca6422330528756397"
  }
}
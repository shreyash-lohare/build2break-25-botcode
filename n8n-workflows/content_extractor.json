{
  "nodes": [
    {
      "parameters": {
        "formTitle": "prompt form",
        "formDescription": "asd",
        "formFields": {
          "values": [
            {
              "fieldLabel": "prompt",
              "placeholder": "enter a request for video",
              "requiredField": true
            },
            {
              "fieldLabel": "pdf",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".pdf",
              "requiredField": true
            }
          ]
        },
        "options": {
          "buttonLabel": "Submit"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.3,
      "position": [
        -48,
        -64
      ],
      "id": "4e19d7fb-f322-4bbb-a5cb-e35befb9dfb5",
      "name": "On form submission",
      "webhookId": "a88cb3b2-c42a-4594-ad97-7c49fbc4e0d0"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code Node Script: Convert Binary PDF to Base64\n *\n * This script processes binary PDF data from an n8n input item,\n * converts it to a Base64 encoded string, and adds it back to the item's JSON data.\n *\n * How to use:\n * 1. Connect this \"Code\" node to a node that outputs a file (e.g., \"HTTP Request\", \"Read Binary File\", \"Webhook\", \"Form Trigger\").\n * 2. The script assumes the binary data is on the property named 'pdf' based on your provided input.\n * 3. If your file data is under a different property name (e.g., from a form field named 'upload'),\n * you MUST change the `binaryPropertyName` variable below to match that name.\n * 4. The output will be the same as the input, but each item's JSON will now have a new field: `base64EncodedString`.\n */\n\n// n8n provides the input data in the 'items' array. We will loop through each item to process it.\nfor (const [itemIndex, item] of items.entries()) {\n  // --- IMPORTANT CONFIGURATION ---\n  // Based on your input, the binary property is named 'pdf'.\n  // If this changes, update the variable below.\n  const binaryPropertyName = 'pdf';\n\n  // Check if the binary data exists on the item to avoid errors.\n  if (item.binary && item.binary[binaryPropertyName]) {\n\n    // **FIX APPLIED HERE**\n    // Use the 'helpers.getBinaryDataBuffer()' function, which is the correct\n    // method for reading binary data within the \"Code\" node.\n    // We pass it the item's index and the name of the binary property.\n    const pdfBuffer = await helpers.getBinaryDataBuffer(itemIndex, binaryPropertyName);\n\n    // Encode the buffer into a Base64 string. This is the core conversion.\n    const base64String = pdfBuffer.toString('base64');\n\n    // Add the new Base64 string to the JSON part of the item.\n    // It will be available in subsequent nodes under this key.\n    item.json.base64EncodedString = base64String;\n\n  } else {\n    // Optional: Handle the case where no binary data is found on an item.\n    // You can add an error message or set a default value.\n    item.json.error = `Binary data not found under property '${binaryPropertyName}'. Please check the input and the 'binaryPropertyName' variable.`;\n  }\n}\n\n// Return the modified items.\n// Each item will now have a 'base64EncodedString' property in its JSON data\n// if the binary PDF was found and processed successfully.\nreturn items;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        576
      ],
      "id": "df94349e-259d-4a4a-a3a0-a6a407eaa7a4",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "resource": "file",
        "fileUrl": "={{ $json.publicUrl }}"
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        400,
        -64
      ],
      "id": "83fb49f6-e980-49a5-b820-580b9e983739",
      "name": "Upload a file",
      "credentials": {
        "googlePalmApi": {
          "id": "6CSvubRfgRyhUNwP",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -48,
        160
      ],
      "id": "d51745b8-14d2-4593-8f7b-c25df9def7fe",
      "name": "Create a row in Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "Dsop4Zn8ImSxqrMc",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://kpzphxksscudlwtxayvc.supabase.co/functions/v1/file-handler",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtwenBoeGtzc2N1ZGx3dHhheXZjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTU4MDgzNiwiZXhwIjoyMDc1MTU2ODM2fQ.4b5DAOmNxlFktoCrI9wKhC6Y5wjOWGpcUVMDyMrotz4"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "=pdf"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        -64
      ],
      "id": "e28614dc-289c-416e-a31c-e53183e0dbb2",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -48,
        368
      ],
      "id": "7f4ba01c-3145-484d-93a4-f2e84d9960a3",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "6CSvubRfgRyhUNwP",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-goog-api-key",
              "value": "AIzaSyAdAt_uiRVQp0G86ter5w-bFa6YnCb5Iks"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"fileData\": {\n            \"mimeType\": \"{{ $('Upload a file').item.json.mimeType }}\",\n            \"fileUri\": \"{{ $('Upload a file').item.json.fileUri }}\"\n          }\n        },\n        {\n          \"text\": \"User's special needs (only allow if it doesnt go beyond safety policies):{{ $('On form submission').item.json.prompt }}\"\n        }\n      ]\n    }\n  ],\n  \"systemInstruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are an expert AI for structured data extraction. Your ONLY output MUST be a single, valid JSON object. NEVER output conversational text, summaries, or any text outside of the JSON structure.\\n\\nYour output MUST conform to this schema: {\\\"topic\\\": string, \\\"key_points\\\": [{\\\"point\\\": string, \\\"source\\\": string}]}\\n\\nRules:\\n1. Analyze the document at a university-level depth unless the user specifies otherwise.\\n2. Every 'point' MUST be a direct quote or a very close paraphrase from the document.\\n3. The 'source' MUST be as precise as possible (e.g., 'Page 5, Section 3.2').\\n4. Do not invent information or use external knowledge.\\n\\nExample of required output format:\\n{\\\"topic\\\":\\\"Dopamine & Motivation\\\",\\\"key_points\\\":[{\\\"point\\\":\\\"Dopamine is released in anticipation of a reward, driving motivation.\\\",\\\"source\\\":\\\"Page 2, Para 1\\\"}]}\\n\\nBegin analysis.\"\n      }\n    ]\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        624,
        -64
      ],
      "id": "d1393cc0-1bdf-4609-99d6-1e2e496f968b",
      "name": "HTTP Request1",
      "credentials": {
        "googlePalmApi": {
          "id": "6CSvubRfgRyhUNwP",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42fa1acd-bca0-4d30-96cf-0f52d8428fb5",
              "name": "response",
              "value": "={{ $json.candidates[0].content.parts[0].text.split(\"SYSTEM PROMPT ENDS\") }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        816,
        -16
      ],
      "id": "b70ea23e-1f98-4df0-b42c-9617a62d6807",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=# ROLE & GOAL\nYou are a creative and concise YouTube Shorts scriptwriter. Your mission is to transform a set of key points from a PDF into a compelling, visually-driven video script that is under 60 seconds long. The final video will use doodle and freehand whiteboard-style animations, so your visual ideas must be simple and clear.\n\n# CONSTRAINTS\n1.  Total Narration: The total word count for the narration across all scenes MUST be under 150 words.\n2.  Visual Style: The visual ideas MUST be describable as simple doodles, sketches, or whiteboard drawings. Do not suggest complex animations or realistic images.\n3.  Minimize On-Screen Text: The script should rely on visuals and narration, not text overlays.\n4.  Output Format: You MUST respond with a single, clean JSON object and nothing else. Do not include any introductory text, apologies, or explanations outside of the JSON structure.\n\n# TASK\nGiven the following key points from a document, perform these steps:\n1.  Create a short, catchy `title` for the video.\n2.  Structure the script into an array of 3 to 5 `scenes`.\n3.  For each scene:\n    a. Write a `narration` line. It must be conversational and easy to understand.\n    b. Create a `visual_idea`. Describe a simple doodle or sketch that visually represents the narration. Be descriptive (e.g., \"A hand draws a lightbulb that turns on,\" \"An animated bar chart quickly grows\").\n    c. Include the `source_citation` from the input that corresponds to the information in the scene. If a scene is introductory or transitional, the citation can be null.\n4.  Calculate the `total_word_count` of all narration combined.\n5.  Return this entire structure as a single, valid JSON object.\n\n# INPUT DATA\n{{ $json.response }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1040,
        -16
      ],
      "id": "ec33cf0c-740b-4237-b323-bda710c3b87a",
      "name": "Message a model",
      "retryOnFail": false,
      "waitBetweenTries": 5000,
      "executeOnce": false,
      "credentials": {
        "googlePalmApi": {
          "id": "6CSvubRfgRyhUNwP",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        []
      ]
    },
    "Upload a file": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Upload a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a06370c1558bdfcb1f62c6257da0d3623c935a386284d4ca6422330528756397"
  }
}
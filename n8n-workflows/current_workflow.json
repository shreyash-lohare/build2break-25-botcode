{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "pdf-upload",
        "responseMode": "lastNode",
        "responseData": "allEntries",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "7e9f0c3a-3a7b-4834-a692-b670e87ac37f",
      "name": "Webhook",
      "webhookId": "0a8e36f0-85f8-4f20-b29c-bf4fe92a573a"
    },
    {
      "parameters": {
        "jsCode": "// Just log what we received\nconsole.log(\"Script generated:\", JSON.stringify($input.all(), null, 2));\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2848,
        0
      ],
      "id": "4532ec4a-1f7f-4326-ab91-98d296ca1a98",
      "name": "Test_Output"
    },
    {
      "parameters": {
        "jsCode": "// Get the uploaded file from webhook\nconst items = $input.all();\n\n// Extract binary data\nlet pdfText = \"\";\nlet pages = [];\n\ntry {\n  // Try to extract text from binary (basic extraction)\n  const binaryData = items[0].binary.data;\n  \n  // Convert buffer to string (simple text extraction)\n  // This works for text-based PDFs\n  pdfText = binaryData.toString('utf-8').replace(/[^\\x20-\\x7E\\n]/g, ' ');\n  \n  // Split into rough \"pages\" (every 2000 chars)\n  const pageSize = 2000;\n  for (let i = 0; i < pdfText.length; i += pageSize) {\n    pages.push({\n      page_number: Math.floor(i / pageSize) + 1,\n      text: pdfText.slice(i, i + pageSize),\n      char_count: Math.min(pageSize, pdfText.length - i)\n    });\n  }\n  \n} catch (error) {\n  // Fallback: use filename as indicator\n  pdfText = \"PDF uploaded: \" + (items[0].binary.fileName || \"document.pdf\");\n  pages = [{page_number: 1, text: pdfText, char_count: pdfText.length}];\n}\n\n// Trim to reasonable length for LLM (max 8000 chars)\nconst trimmedText = pdfText.slice(0, 8000);\n\nreturn [{\n  json: {\n    full_text: trimmedText,\n    extracted_data: {\n      total_pages: pages.length,\n      pages: pages\n    },\n    summary: `Extracted ${pages.length} sections with ${trimmedText.length} characters`,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        0
      ],
      "id": "52b7f9af-2674-4801-8da3-a101892078d1",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// FunctionItem node processes one item at a time\nlet scriptData;\n\ntry {\n    // Get the text content from Gemini response for this item\n    const geminiText = $input.item.json.content.parts[0].text;\n\n    // Parse the JSON string\n    scriptData = JSON.parse(geminiText);\n\n    // Return the structured output\n    return {\n        json: {\n            script: scriptData,\n            scenes: scriptData.scenes,\n            total_scenes: scriptData.scenes.length,\n            narration_text: scriptData.scenes.map(s => s.narration).join(' ')\n        }\n    };\n\n} catch (error) {\n    // Throw a clear error if JSON parsing fails\n    throw new Error(`Failed to parse script JSON: ${error.message}`);\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        0
      ],
      "id": "13cc123f-1584-42e0-bf16-dd46cbe6d324",
      "name": "Parse_Script"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash-lite-preview",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash-lite-preview"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert at creating DALL-E/Stable Diffusion prompts for doodle-style animations.\n\nINPUT SCENES:\n{{ JSON.stringify($json.scenes, null, 2) }}\n\nFor EACH scene, create a detailed image generation prompt that will produce a DOODLE/SKETCH/WHITEBOARD style illustration.\n\nOUTPUT as JSON array (no markdown):\n[\n  {\n    \"scene_number\": 1,\n    \"image_prompt\": \"hand-drawn doodle sketch, black and white line art, simple illustration of [scene description], whiteboard style, sketch marks visible, imperfect lines, playful style, minimalist, educational\",\n    \"style_tags\": \"doodle, sketch, hand-drawn, whiteboard, line art, simple\"\n  }\n]\n\nSTYLE REQUIREMENTS:\n- Black and white or minimal color\n- Hand-drawn, sketchy aesthetic\n- Simple, not photorealistic\n- Educational/explainer video style\n- Visible sketch marks\n- Include all visual elements from the scene description\n- Add motion indicators (arrows, lines, etc.)\n\nOUTPUT ONLY THE JSON ARRAY."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        2016,
        32
      ],
      "id": "55c7d306-0015-4027-a359-4dc61cbe9535",
      "name": "VisualsPlanner",
      "credentials": {
        "googlePalmApi": {
          "id": "6CSvubRfgRyhUNwP",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2368,
        16
      ],
      "id": "37de2fa4-79bb-4810-8dcc-f6eac0960e59",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        2576,
        0
      ],
      "id": "e9f68995-7942-481b-a2af-3127645019f8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/wSO34DbFKBGmeCNpJL5K",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_361b2690698c63e3335cf0746ec912f9e25f63ebece10b92"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{ $json.narration_text }}\",\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.75,\n    \"speed\": 1.1\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2288,
        496
      ],
      "id": "6f766b5c-1a45-4261-a87c-1aa3022ac437",
      "name": "Generate_VoiceOver"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4a293a57-3227-4c5f-b1a1-4b530c180699",
              "name": "input_data",
              "value": "{   \"topic\": \"The Role of Dopamine in Motivation\",   \"key_points\": [     {       \"point\": \"Dopamine is a neurotransmitter often called the 'motivation molecule' because it is released in anticipation of a reward.\",       \"source\": \"Page 2, Paragraph 1\"     },     {       \"point\": \"Studies show that higher dopamine levels increase the willingness to exert effort for a reward.\",       \"source\": \"Page 4, Paragraph 3\"     },     {       \"point\": \"It's not about the pleasure of the reward itself, but the motivational drive to seek it out.\",       \"source\": \"Page 5, Paragraph 2\"     }   ] }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        688,
        0
      ],
      "id": "3fc1e788-0a0d-4be7-b996-c60ab69321f6",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=# ROLE & GOAL\nYou are a creative and concise YouTube Shorts scriptwriter. Your mission is to transform a set of key points from a PDF into a compelling, visually-driven video script that is under 60 seconds long. The final video will use doodle and freehand whiteboard-style animations, so your visual ideas must be simple and clear.\n\n# CONSTRAINTS\n1.  Total Narration: The total word count for the narration across all scenes MUST be under 150 words.\n2.  Visual Style: The visual ideas MUST be describable as simple doodles, sketches, or whiteboard drawings. Do not suggest complex animations or realistic images.\n3.  Minimize On-Screen Text: The script should rely on visuals and narration, not text overlays.\n4.  Output Format: You MUST respond with a single, clean JSON object and nothing else. Do not include any introductory text, apologies, or explanations outside of the JSON structure.\n\n# TASK\nGiven the following key points from a document, perform these steps:\n1.  Create a short, catchy `title` for the video.\n2.  Structure the script into an array of 3 to 5 `scenes`.\n3.  For each scene:\n    a. Write a `narration` line. It must be conversational and easy to understand.\n    b. Create a `visual_idea`. Describe a simple doodle or sketch that visually represents the narration. Be descriptive (e.g., \"A hand draws a lightbulb that turns on,\" \"An animated bar chart quickly grows\").\n    c. Include the `source_citation` from the input that corresponds to the information in the scene. If a scene is introductory or transitional, the citation can be null.\n4.  Calculate the `total_word_count` of all narration combined.\n5.  Return this entire structure as a single, valid JSON object.\n\n# INPUT DATA\n{{ JSON.stringify($('Edit Fields').item.json.input_data) }}"
            }
          ]
        },
        "simplify": false,
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        944,
        32
      ],
      "id": "653c73d0-a0c0-4292-9cb5-1be9b94bec5b",
      "name": "Message a model",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "googlePalmApi": {
          "id": "6CSvubRfgRyhUNwP",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the complex output from the Gemini node\nconst geminiResponse = $json;\n\n// Extract the text content which contains our JSON script\nconst scriptText = geminiResponse.candidates[0].content.parts[0].text;\n\n// Convert the text string into a real JSON object\nconst finalScript = JSON.parse(scriptText);\n\n// Return the clean JSON object as the final output of this node\nreturn finalScript;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        32
      ],
      "id": "722d5f07-7285-49a0-b3b4-4238fea8be65",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.shotstack.io/v1/render",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "bTqgXneYnfosK52HpssZvGuHVo9UsAqhwTfvCnnU"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"timeline\": {\n    \"soundtrack\": {\n      \"src\": \"{{ $('Generate_Voiceover').item.binary.audio.data }}\",\n      \"effect\": \"fadeIn\"\n    },\n    \"tracks\": [\n      {\n        \"clips\": [\n          {{#each $('Loop_Over_Items').all()}}\n          {\n            \"asset\": {\n              \"type\": \"image\",\n              \"src\": \"{{ this.binary.image.data }}\"\n            },\n            \"start\": {{ @index * 5 }},\n            \"length\": 5,\n            \"transition\": {\n              \"in\": \"fade\",\n              \"out\": \"fade\"\n            }\n          }{{#unless @last}},{{/unless}}\n          {{/each}}\n        ]\n      }\n    ]\n  },\n  \"output\": {\n    \"format\": \"mp4\",\n    \"resolution\": \"hd\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2592,
        80
      ],
      "id": "f4e26adc-8d4b-4ff9-80e6-876a3d4a70c6",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "b8a9777b-c4e7-459c-aca5-4ee7d7204897",
      "name": "Merge_Audio_Images",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2816,
        528
      ],
      "notes": "Combines images from Loop and audio from ElevenLabs"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for video creation API\nconst items = $input.all();\n\n// Get audio data\nconst audioItem = items.find(item => item.binary && item.binary.audio);\nconst audioBase64 = audioItem ? audioItem.binary.audio.data.toString('base64') : null;\n\n// Get all images\nconst imageItems = items.filter(item => item.binary && item.binary.image);\nconst images = imageItems.map((item, index) => ({\n  index: index,\n  data: item.binary.image.data.toString('base64'),\n  mimeType: item.binary.image.mimeType,\n  duration: 5 // seconds per image\n}));\n\nreturn [{\n  json: {\n    audio: {\n      data: audioBase64,\n      mimeType: 'audio/mpeg'\n    },\n    images: images,\n    totalDuration: images.length * 5,\n    imageCount: images.length\n  }\n}];"
      },
      "id": "8585ba29-1106-48ac-bee8-bb45469a35ac",
      "name": "Prepare_Video_Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        1136
      ],
      "notes": "Extracts and prepares audio + images for video API"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.shotstack.io/v1/render",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "={{ $env.SHOTSTACK_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "500aec97-3cfa-4d44-9574-f7c77708c8ee",
      "name": "Create_Video_Shotstack",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2512,
        1136
      ],
      "notes": "Calls Shotstack API to create video"
    },
    {
      "parameters": {
        "amount": 30
      },
      "id": "8a1e1fcc-2e74-4585-997a-239a9599d43a",
      "name": "Wait_For_Render",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2720,
        1136
      ],
      "webhookId": "568ab1b5-fc87-456b-9e6f-49e8867ee7ae",
      "notes": "Wait 30 seconds for video to render"
    },
    {
      "parameters": {
        "url": "=https://api.shotstack.io/v1/render/{{ $('Create_Video_Shotstack').item.json.response.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "={{ $env.SHOTSTACK_API_KEY }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e6249bf3-05c3-4896-b257-f30426d00268",
      "name": "Check_Video_Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2912,
        1136
      ],
      "notes": "Check if video rendering is complete"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.response.status }}",
              "operation": "equals",
              "value2": "done"
            }
          ]
        },
        "options": {}
      },
      "id": "fa8f46bd-112b-43a0-abb5-16bdc11820d7",
      "name": "Check_If_Ready",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3120,
        1136
      ],
      "notes": "Check if status is 'done'"
    },
    {
      "parameters": {
        "url": "={{ $('Check_Video_Status').item.json.response.url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "video"
            }
          }
        }
      },
      "id": "14527b16-72e1-4b14-88a1-5a0e2af32ce1",
      "name": "Download_Video",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3312,
        1024
      ],
      "notes": "Download completed video"
    },
    {
      "parameters": {},
      "id": "9a7917b7-583e-440e-ba71-53657ca5d287",
      "name": "Video_Not_Ready",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3312,
        1232
      ],
      "notes": "Video still rendering - loop back to wait"
    },
    {
      "parameters": {
        "jsCode": "console.log($json.narration_text);\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1808,
        256
      ],
      "id": "55b044e8-41a3-458d-aa8c-a1b5d4e565b0",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "jsCode": "// Example: after parsing Gemini response\nconst scenes = $json.scenes || $json;\n\nreturn {\n  json: {\n    narration_text: scenes[0]?.narration || \"No narration available\",\n    scene_number: scenes[0]?.scene_number || 1\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        240
      ],
      "id": "d2235d39-0e15-4407-808b-36c501d40ac8",
      "name": "Code in JavaScript3"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Parse_Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VisualsPlanner": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge_Audio_Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate_VoiceOver": {
      "main": [
        [
          {
            "node": "Merge_Audio_Images",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "VisualsPlanner",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Test_Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge_Audio_Images": {
      "main": [
        [
          {
            "node": "Prepare_Video_Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare_Video_Data": {
      "main": [
        [
          {
            "node": "Create_Video_Shotstack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create_Video_Shotstack": {
      "main": [
        [
          {
            "node": "Wait_For_Render",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait_For_Render": {
      "main": [
        [
          {
            "node": "Check_Video_Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check_Video_Status": {
      "main": [
        [
          {
            "node": "Check_If_Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check_If_Ready": {
      "main": [
        [
          {
            "node": "Download_Video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Video_Not_Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video_Not_Ready": {
      "main": [
        [
          {
            "node": "Wait_For_Render",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Generate_VoiceOver",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "a06370c1558bdfcb1f62c6257da0d3623c935a386284d4ca6422330528756397"
  }
}